// Generador de Actas para Comit√©s SENA
// Este es mi proyecto final de pr√°cticas - Sistema automatizado para generar actas
// Me emociona mucho haber logrado integrar IA para automatizar este proceso
// Autor: Estudiante en pr√°ctica - ADSO (An√°lisis y Desarrollo de Software)

const fs = require("fs");
const path = require("path");

// Cargo las variables de entorno 
require('dotenv').config();

// Esta es mi clase principal 
class GeneradorDeActasSENA {
    constructor() {
        this.miClaveAPI = process.env.GEMINI_API_KEY;
        this.modeloIA = null;
        this.reglamento = {};
    }

    async init() {
        await this.configurarConexionConGemini();
        this.cargarReglamento();
        return true;
    }

    cargarReglamento() {
        const ruta = path.join(__dirname, '../../config/reglamento.json');
        try {
            if (fs.existsSync(ruta)) {
                const data = fs.readFileSync(ruta, 'utf-8');
                this.reglamento = JSON.parse(data).articulos || {};
                console.log(`üìö Reglamento del Aprendiz cargado (${Object.keys(this.reglamento).length} art√≠culos)`);
            } else {
                console.log('‚ÑπÔ∏è No encontr√© config/reglamento.json');
            }
        } catch (e) {
            console.error('‚ö†Ô∏è No pude cargar el reglamento:', e.message);
            this.reglamento = {};
        }
    }

    obtenerTextoReglamento(codigos = []) {
        if (!Array.isArray(codigos) || codigos.length === 0) return '';
        return codigos.map(c => {
            const texto = this.reglamento[c];
            return texto ? `- ${c}: ${texto}` : '';
        }).filter(Boolean).join('\n');
    }

    async configurarConexionConGemini() {
        try {
            // Importo la librer√≠a de Google (me cost√≥ entender c√≥mo usarla al principio)
            const { GoogleGenerativeAI } = require("@google/generative-ai");
            this.clienteGemini = new GoogleGenerativeAI(this.miClaveAPI);

            // Uso el modelo que configur√© en las variables de entorno
            const modeloQueVoyAUsar = process.env.MODELO_GEMINI || 'gemini-2.5-flash';

            this.modeloIA = this.clienteGemini.getGenerativeModel({
                model: modeloQueVoyAUsar,
                generationConfig: {
                    temperature: parseFloat(process.env.TEMPERATURA) || 0.3,  // No muy creativo, m√°s formal
                    topK: 20,
                    topP: 0.8,
                    maxOutputTokens: parseInt(process.env.MAX_TOKENS) || 4900,
                }
            });
            console.log(`‚úÖ ¬°Logr√© conectar con Gemini! Usando modelo: ${modeloQueVoyAUsar}`);
            return true;
        } catch (error) {
            console.error("‚ùå Tuve problemas configurando Gemini:", error.message);
            console.log("üí° Necesito instalar: npm install @google/generative-ai");
            console.log("üí° Y configurar mi GEMINI_API_KEY en el archivo .env");
            throw error;
        }
    }

    obtenerPlantillaDelActa() {
        // Esta plantilla la hice bas√°ndome en las actas reales que vi en el SENA
        return `Eres un asistente experto en redactar actas formales del Comit√© de Evaluaci√≥n y Seguimiento del SENA.

Debes generar un acta **siguiendo exactamente esta estructura y formato**.

---

# ACTA No. [N√öMERO]
## COMIT√â DE EVALUACI√ìN Y SEGUIMIENTO

**CIUDAD Y FECHA:** [Extraer de transcripci√≥n]  
**HORA INICIO:** [Extraer o estimar]  
**HORA FIN:** [Calcular]  
**LUGAR:** [Virtual/Presencial o extraer]

---

## AGENDA O PUNTOS PARA DESARROLLAR:
**1. Saludo** 
**2. Verificaci√≥n del Qu√≥rum** 
**3. Hechos que ser√°n objeto de estudio en el Comit√©** 
**4. Instalaci√≥n del Comit√© por parte del Coordinador Acad√©mico** 
**5. Desarrollo del Comit√©/ An√°lisis del Caso, descargos del aprendiz y practica de pruebas a que haya lugar.**
**6. An√°lisis y conclusiones realizadas por el Comit√©.**

---

## OBJETIVO(S) DE LA REUNI√ìN:
Analizar el caso del aprendiz [Extraer de transcripci√≥n] DEL PROGRAMA [Extraer de transcripci√≥n] FICHA: [Extraer de transcripci√≥n]  

---

## DESARROLLO DE LA REUNI√ìN

### 1. SALUDO
Se da inicio con el saludo de bienvenida.

### 2. VERIFICACI√ìN DEL QU√ìRUM
Verificada la asistencia y existiendo qu√≥rum para sesionar y decidir, se da inicio al comit√© y se procede de conformidad al orden del d√≠a.

## PARTICIPANTES
- **COORDINACI√ìN ACAD√âMICA:** [Nombre y cargo]
- **BIENESTAR DEL APRENDIZ:** [Nombre y cargo]
- **INSTRUCTORES:** [Lista de instructores]
- **APRENDIZ CITADO:** [Nombre del aprendiz]
- **REPRESENTANTE DE CENTRO:** [Nombre]
- **VOCERO:** [Nombre]

### 3. HECHOS QUE SER√ÅN OBJETO DE ESTUDIO EN EL COMIT√â
[Enumera cada hecho con n√∫meros consecutivos. Extrae con claridad los hechos reportados por los instructores, mencionando fechas, fallas y evidencias. Por ejemplo: "1) El d√≠a 13 de diciembre del 2024 el aprendiz falla la prueba de conocimiento por segunda vez, teniendo en cuenta que previamente se hab√≠a asignado una actividad complementaria. etc."].

Se indica la preocupaci√≥n acerca del tema, el cual radica en que se evidencia incumplimiento del REGLAMENTO DEL APRENDIZ: en el [Cita el art√≠culo exacto del reglamento del aprendiz que describa el incumplimiento Por ejemplo: CAPITULO III DEBERES DEL APRENDIZ SENA; Art√≠culo 22¬∫ Deberes del aprendiz, en su numeral cita: Numeral 6 Cumplir con todas las actividades de aprendizaje propias de su proceso formativo, presentando las evidencias seg√∫n la planeaci√≥n pedag√≥gica, gu√≠as de aprendizaje y cronograma, en los plazos o en la oportunidad que estas deban presentarse o reportarse, a trav√©s de los medios dispuestos para ello Numeral 7. Realizar una dedicaci√≥n efectiva del tiempo, priorizando las actividades de aprendizaje y manteniendo un compromiso constante para alcanzar los resultados de aprendizaje propuestos en el programa de formaci√≥n.]

Hechos Instructor(a) [Nombre del instructor]:

El aprendiz [Nombre del aprendiz], (agregar numero de CC o TI) se reporta a comit√© de tipo [Tipo de comit√©, por ejemplo: "academico", "disciplinario", etc.] 
Instructor(a): [Cargo y nombre del instructor]: [extrae los hechos reportados por el instructor, incluyendo fechas, fallas y evidencias. Por ejemplo: "El aprendiz no particip√≥ en las actividades de socializaci√≥n, no subi√≥ evidencias al drive, no particip√≥ en exposiciones ni en actividades de bienestar del aprendiz."]

Se indica la preocupaci√≥n acerca del tema, el cual radica en que se evidencia incumplimiento del REGLAMENTO DEL APRENDIZ: en el [Cita el art√≠culo exacto del reglamento del aprendiz que describa el incumplimiento Por ejemplo: "CAPITULO III DEBERES DEL APRENDIZ SENA; Articulo No.9 Deberes del aprendiz, en su numeral 4, el cual cita: Participar en las actividades complementarias o de profundizaci√≥n, relacionadas con el programa de formaci√≥n, con el fin de gestionar su proceso de aprendizaje."]

Por lo anterior y respetando el debido proceso, se cita al aprendiz [Nombre del aprendiz] del programa [extraer programa y numero de la ficha. Por ejemplo: "TECNICO DE ASISTECIA ADMINISTRATIVA FICHA 3065626"]. para la presentaci√≥n de sus descargos ante el Comit√© de Evaluaci√≥n y Seguimiento, respetando el derecho que le asiste a controvertir las pruebas allegadas o que se alleguen en su contra y a aportar y/o solicitar la pr√°ctica de las pruebas que considere pertinentes.

### 4. INSTALACI√ìN DEL COMIT√â POR PARTE DEL COORDINADOR
El coordinador JOHON FREDY SANABRIA MU√ëOZ da un saludo de bienvenida a los presentes en el comit√©. El Comit√© de Evaluaci√≥n y Seguimiento es una instancia acad√©mica fundamental en nuestra instituci√≥n. Su prop√≥sito principal es orientar y apoyar de manera integral el proceso de formaci√≥n de nuestros aprendices, asegurando que se lleve a cabo con los m√°s altos est√°ndares de calidad. Este comit√© desempe√±a un papel fundamental al analizar y evaluar de manera constante los programas de estudio, los m√©todos pedag√≥gicos y los resultados obtenidos. Adem√°s, se encarga de proponer mejoras, ajustes y estrategias que contribuyan a optimizar la experiencia educativa de nuestros aprendices. Nuestro objetivo com√∫n es formar profesionales competentes, √©ticos y comprometidos con su desarrollo personal y con la sociedad. A trav√©s del trabajo conjunto del Comit√© de Evaluaci√≥n y Seguimiento, podremos garantizar que estamos cumpliendo con nuestra misi√≥n de ofrecer una educaci√≥n de calidad.

### 5. DESARROLLO DEL COMIT√â / ANALISIS DEL CASO, DESCARGOS DEL APRENDIZ Y PR√ÅCTICA DE PRUEBAS A QUE HAYA LUGAR
[Intervenciones de los participantes comieza con Interviene [Cargo y nombre], extrae y resume lo mas relevante dicho por los participantes, extrae los puntos tratados an√°lisis del caso, descargos del aprendiz, pruebas realizadas y cualquier otro detalle relevante.]

### 6. CONCLUSIONES
[Resume lo mas que se pueda el tipo de falta, gravedad, medidas, planes de mejoramiento.]

---

## COMPROMISOS Y SEGUIMIENTO

| Actividad/Decisi√≥n | Fecha L√≠mite | Responsable |
|-------------------|--------------|-------------|
| [Compromiso 1]     | [Fecha]      | [Nombre]    |
| [Compromiso 2]     | [Fecha]      | [Nombre]    |

---

De acuerdo con La Ley 1581 de 2012, Protecci√≥n de Datos Personales, el Servicio Nacional de Aprendizaje SENA, se compromete a garantizar la seguridad y protecci√≥n de los datos personales que se encuentran almacenados en este documento, y les dar√° el tratamiento correspondiente en cumplimiento de lo establecido legalmente.

## INSTRUCCIONES ADICIONALES:
- Usa **tercera persona** y lenguaje formal.
- **No inventes contenido** si no est√° en la transcripci√≥n.
- Usa **"No especificado en transcripci√≥n"** si falta alg√∫n dato.
- Respeta **el orden y t√≠tulos exactos** del formato.
- Usa Markdown correctamente (t√≠tulos con #, negritas con **).
- si en las intervenciones no reconoces el nombre de un participante, revisa los nombres de los participantes en la secci√≥n de participantes y utiliza el nombre que creas que corresponde teniendo en cuenta lo que esta dicendo el texto.
- resume las intervenciones de los participantes, no copies textualmente lo que dicen, extrae lo mas relevante de cada intervenci√≥n.
- resume las conclusiones de forma clara y concisa, no copies textualmente lo que dicen los participantes.

Ahora redacta el acta en formato Markdown con base en la siguiente transcripci√≥n.`;
    }

    // Funci√≥n para crear las carpetas donde guardo mis actas
    crearCarpetaParaElProyecto(nombreDelProyecto, esVersionFinal = false) {
        const carpetaPrincipal = esVersionFinal ? 'actas_gemini/finales' : 'actas_gemini/versiones';
        const nombreLimpio = nombreDelProyecto.replace(/_transcripcion.*$/, '').replace(/[^a-zA-Z0-9_]/g, '_');
        const rutaCarpetaCompleta = path.join(carpetaPrincipal, nombreLimpio);
        
        if (!fs.existsSync(rutaCarpetaCompleta)) {
            fs.mkdirSync(rutaCarpetaCompleta, { recursive: true });
            console.log(`üìÅ Cre√© la carpeta: ${rutaCarpetaCompleta}`);
        }
        
        return rutaCarpetaCompleta;
    }

    // Extraigo metadatos b√°sicos del acta en formato Markdown
    extraerMetadatosDelActa(textoActa) {
        const obtener = (regex) => {
            const m = textoActa.match(regex);
            return m ? m[1].trim() : null;
        };

        const limpiar = (v) => v ? v.replace(/\*+/g, '').trim() : v;

        const fecha = limpiar(obtener(/CIUDAD Y FECHA:\s*([^\n]+)/i));
        const horaInicio = limpiar(obtener(/HORA INICIO:\s*([^\n]+)/i));
        const horaFin = limpiar(obtener(/HORA FIN:\s*([^\n]+)/i));

        let participantes = [];
        const seccionPartes = textoActa.split(/##\s*PARTICIPANTES/i)[1];
        if (seccionPartes) {
            for (const linea of seccionPartes.split(/\r?\n/)) {
                const recorte = linea.trim();
                if (recorte.startsWith('##')) break;
                if (recorte.startsWith('-')) {
                    participantes.push(recorte.replace(/^-+\s*/, '').replace(/\*+/g, '').trim());
                }
            }
        }

        const obtenerSeccion = (regex) => {
            const partes = textoActa.split(regex);
            if (partes.length < 2) return null;
            return partes[1].split(/\n###\s*\d+\./)[0].trim();
        };

        const hechos = obtenerSeccion(/###\s*3\.?[^\n]*HECHOS[^\n]*/i);
        const desarrolloComite = obtenerSeccion(/###\s*5\.?[^\n]*DESARROLLO[^\n]*/i);
        const conclusiones = obtenerSeccion(/###\s*6\.?[^\n]*CONCLUSIONES[^\n]*/i);

        return { fecha, horaInicio, horaFin, participantes, hechos, desarrolloComite, conclusiones };
    }

    async generarMiActa(textoTranscripcion, informacionExtra = {}) {
        if (!this.modeloIA) {
            console.error("‚ùå No tengo Gemini configurado. Necesito verificar mi API key.");
            return null;
        }

        console.log("ü§ñ Generando acta con mi sistema de IA...");

        const textoReducido = textoTranscripcion.length > 4900
    ? textoTranscripcion.slice(0, 4900) + "\n[...transcripci√≥n truncada por longitud...]"
    : textoTranscripcion;

        const articulos = this.obtenerTextoReglamento(informacionExtra.articulosReglamento);
        const promptCompleto = `${this.obtenerPlantillaDelActa()}

TRANSCRIPCI√ìN DEL COMIT√â QUE NECESITO PROCESAR:
${textoReducido}

INFORMACI√ìN ADICIONAL QUE DETECT√â:
- Programa Acad√©mico: ${informacionExtra.programaAcademico || 'T√©cnico en Asistencia Administrativa'}
- N√∫mero de Ficha: ${informacionExtra.numeroFicha || 'Por determinar'}
- Fecha del Comit√©: ${informacionExtra.fechaDeHoy || new Date().toLocaleDateString('es-CO')}
- Aprendiz Principal: ${informacionExtra.nombreAprendiz || 'Extraer de la transcripci√≥n'}
${articulos ? `\nNORMATIVA APLICABLE:\n${articulos}\n` : ''}

Por favor ay√∫dame a generar el acta formal completa siguiendo exactamente el formato que necesito.`;

        try {
            const resultadoDeGemini = await this.modeloIA.generateContent(promptCompleto);
            const respuestaObtenida = await resultadoDeGemini.response;
            
            if (!respuestaObtenida) {
                throw new Error("Gemini no me respondi√≥ nada");
            }

            const actaGenerada = respuestaObtenida.text();
            
            // Creo la carpeta espec√≠fica para este proyecto
            const nombreProyecto = informacionExtra.nombreDelProyecto || 'acta_comite';
            const carpetaDelProyecto = this.crearCarpetaParaElProyecto(nombreProyecto, informacionExtra.esVersionFinal);
            
            // Genero el nombre del archivo
            const fechaHoy = new Date().toISOString().split('T')[0];
            const nombreDelArchivo = informacionExtra.esVersionFinal ? 
                `${nombreProyecto}_final.md` : 
                `${nombreProyecto}_${fechaHoy}.md`;
            
            const rutaCompletaDelActa = path.join(carpetaDelProyecto, nombreDelArchivo);
            
            fs.writeFileSync(rutaCompletaDelActa, actaGenerada, 'utf-8');
            
            console.log(`‚úÖ ¬°Logr√© generar el acta! Se guard√≥ en: ${rutaCompletaDelActa}`);
            console.log(`üìÑ Tama√±o del acta: ${actaGenerada.length} caracteres`);
            
            const metadatos = this.extraerMetadatosDelActa(actaGenerada);

            return {
                textoDelActa: actaGenerada,
                archivo: rutaCompletaDelActa,
                carpetaDelProyecto: carpetaDelProyecto,
                ...metadatos
            };

        } catch (error) {
            console.error("‚ùå Tuve un problema generando el acta:", error.message);
            
            // Diagnostico qu√© pudo haber pasado (esto me ayuda a aprender)
            if (error.message.includes('API_KEY')) {
                console.log("üí° Parece que hay un problema con mi API Key de Gemini.");
            } else if (error.message.includes('quota')) {
                console.log("üí° Llegu√© al l√≠mite de uso de la API. Intentar√© m√°s tarde.");
            } else if (error.message.includes('model')) {
                console.log("üí° Hay un problema con el modelo que estoy usando.");
            }
            
            return null;
        }
    }
    
    async generarActaEnDosPartes(textoTranscripcion, informacionExtra = {}) {
        if (!this.modeloIA) {
            console.error("‚ùå No tengo Gemini configurado. Necesito verificar mi API key.");
            return null;
        }

        console.log("ü§ñ Generando acta en dos llamadas a Gemini...");

        const articulos = this.obtenerTextoReglamento(informacionExtra.articulosReglamento);
        const promptBase = `${this.obtenerPlantillaDelActa()}

TRANSCRIPCI√ìN DEL COMIT√â QUE NECESITO PROCESAR:
${textoTranscripcion}

INFORMACI√ìN ADICIONAL QUE DETECT√â:
- Programa Acad√©mico: ${informacionExtra.programaAcademico || 'T√©cnico en Asistencia Administrativa'}
- N√∫mero de Ficha: ${informacionExtra.numeroFicha || 'Por determinar'}
- Fecha del Comit√©: ${informacionExtra.fechaDeHoy || new Date().toLocaleDateString('es-CO')}
- Aprendiz Principal: ${informacionExtra.nombreAprendiz || 'Extraer de la transcripci√≥n'}
${articulos ? `\nNORMATIVA APLICABLE:\n${articulos}\n` : ''}

Por favor escribe la primera mitad del acta. Finaliza con la etiqueta <<CONTINUAR>> si falta texto.`;

        try {
            const chat = this.modeloIA.startChat();
            const primeraParte = await chat.sendMessage(promptBase);
            const textoPrimera = (await primeraParte.response).text();

            const segundaParte = await chat.sendMessage("Contin√∫a la redacci√≥n del acta justo donde qued√≥ la etiqueta <<CONTINUAR>> y termina el documento.");
            const textoSegunda = (await segundaParte.response).text();

            const actaFinal = (textoPrimera.replace('<<CONTINUAR>>', '') + '\n' + textoSegunda).trim();

            const nombreProyecto = informacionExtra.nombreDelProyecto || 'acta_comite';
            const carpetaDelProyecto = this.crearCarpetaParaElProyecto(nombreProyecto, informacionExtra.esVersionFinal);
            const fechaHoy = new Date().toISOString().split('T')[0];
            const nombreDelArchivo = informacionExtra.esVersionFinal ?
                `${nombreProyecto}_final.md` :
                `${nombreProyecto}_${fechaHoy}.md`;

            const rutaCompletaDelActa = path.join(carpetaDelProyecto, nombreDelArchivo);
            fs.writeFileSync(rutaCompletaDelActa, actaFinal, 'utf-8');

            console.log(`‚úÖ ¬°Acta generada en dos partes! Se guard√≥ en: ${rutaCompletaDelActa}`);
            console.log(`üìÑ Tama√±o del acta final: ${actaFinal.length} caracteres`);
            
            const metadatos = this.extraerMetadatosDelActa(actaFinal);

            return {
                textoDelActa: actaFinal,
                archivo: rutaCompletaDelActa,
                carpetaDelProyecto: carpetaDelProyecto,
                ...metadatos
            };
        } catch (error) {
            console.error("‚ùå Ocurri√≥ un problema en la generaci√≥n por partes:", error.message);
            return null;
        }
    }

    async generarVariasVersionesDelActa(textoTranscripcion, informacionExtra = {}, numeroDeVersiones = 2) {
        console.log(`üîÑ Voy a generar ${numeroDeVersiones} versiones diferentes del acta para elegir la mejor...`);
        
        const versionesGeneradas = [];
        
        for (let i = 1; i <= numeroDeVersiones; i++) {
            console.log(`üìù Generando versi√≥n ${i} de ${numeroDeVersiones}...`);
            
            const informacionParaEstaVersion = {
                ...informacionExtra,
                nombreDelProyecto: `${informacionExtra.nombreDelProyecto || 'acta'}_version_${i}`,
                esVersionFinal: false
            };
            
            const resultadoDeEstaVersion = await this.generarMiActa(textoTranscripcion, informacionParaEstaVersion);
            
            if (resultadoDeEstaVersion) {
                versionesGeneradas.push({
                    numeroVersion: i,
                    archivoGenerado: resultadoDeEstaVersion.archivo,
                    textoCompleto: resultadoDeEstaVersion.textoDelActa
                });
            }
            
            // Pauso un poco entre versiones para no saturar la API
            if (i < numeroDeVersiones) {
                await new Promise(resolve => setTimeout(resolve, 2000));
            }
        }
        
        console.log(`‚úÖ Logr√© generar ${versionesGeneradas.length} versiones del acta`);
        return versionesGeneradas;
    }

    analizarCalidadDeLasVersiones(listaDeVersiones) {
        console.log("üîç Analizando qu√© versi√≥n qued√≥ mejor...");
        
        const analisisDeVersiones = listaDeVersiones.map(version => {
            const texto = version.textoCompleto;
            
            return {
                numeroVersion: version.numeroVersion,
                archivoGenerado: version.archivoGenerado,
                estadisticas: {
                    longitud: texto.length,
                    numeroSecciones: (texto.match(/#{1,3}/g) || []).length,
                    participantesEncontrados: (texto.match(/\*\*[A-Z\s]+:\*\*/g) || []).length,
                    fechasEncontradas: (texto.match(/\d{1,2}\/\d{1,2}\/\d{4}|\d{1,2} de \w+ de \d{4}/g) || []).length,
                    tieneConclusiones: texto.includes('CONCLUSIONES') ? 1 : 0,
                    tieneCompromisos: texto.includes('COMPROMISOS') ? 1 : 0
                }
            };
        });
        
        console.log("üìä Estad√≠sticas de cada versi√≥n:");
        analisisDeVersiones.forEach(analisis => {
            console.log(`   Versi√≥n ${analisis.numeroVersion}:`);
            console.log(`     - Extensi√≥n: ${analisis.estadisticas.longitud} caracteres`);
            console.log(`     - Secciones: ${analisis.estadisticas.numeroSecciones}`);
            console.log(`     - Participantes: ${analisis.estadisticas.participantesEncontrados}`);
            console.log(`     - Fechas: ${analisis.estadisticas.fechasEncontradas}`);
            console.log(`     - Est√° completa: ${analisis.estadisticas.tieneConclusiones && analisis.estadisticas.tieneCompromisos ? '‚úÖ' : '‚ùå'}`);
        });
        
        // Elijo la mejor versi√≥n bas√°ndome en completitud
        const mejorVersion = analisisDeVersiones.reduce((mejor, actual) => {
            const puntajeMejor = mejor.estadisticas.numeroSecciones + mejor.estadisticas.participantesEncontrados + 
                               mejor.estadisticas.tieneConclusiones + mejor.estadisticas.tieneCompromisos;
            const puntajeActual = actual.estadisticas.numeroSecciones + actual.estadisticas.participantesEncontrados + 
                                actual.estadisticas.tieneConclusiones + actual.estadisticas.tieneCompromisos;
            
            return puntajeActual > puntajeMejor ? actual : mejor;
        });
        
        console.log(`üèÜ La mejor versi√≥n es: Versi√≥n ${mejorVersion.numeroVersion} (${path.basename(mejorVersion.archivoGenerado)})`);
        
        return mejorVersion;
    }

    async crearVersionFinalDelActa(mejorVersion, informacionExtra) {
        try {
            const nombreProyecto = informacionExtra.nombreDelProyecto || 'acta';
            const carpetaFinales = this.crearCarpetaParaElProyecto(nombreProyecto, true);
            
            const nombreArchivoFinal = `${nombreProyecto}_final.md`;
            const rutaArchivoFinal = path.join(carpetaFinales, nombreArchivoFinal);
            
            fs.copyFileSync(mejorVersion.archivoGenerado, rutaArchivoFinal);
            
            console.log(`üéØ ¬°Cre√© la versi√≥n final! Se guard√≥ en: ${rutaArchivoFinal}`);
            
            return rutaArchivoFinal;
        } catch (error) {
            console.log(`‚ùå Tuve problemas creando la versi√≥n final: ${error.message}`);
            return null;
        }
    }
}

// Esta es mi funci√≥n principal que uso desde otros archivos
async function procesarTranscripcionParaGenerarActa(archivoDeTranscripcion, informacionExtra = {}) {
    try {
        // Verifico que el archivo existe
        if (!fs.existsSync(archivoDeTranscripcion)) {
            console.error(`‚ùå No encontr√© el archivo: ${archivoDeTranscripcion}`);
            return false;
        }

        // Leo la transcripci√≥n
        const textoTranscrito = fs.readFileSync(archivoDeTranscripcion, 'utf-8');
        
        if (textoTranscrito.length < 100) {
            console.error("‚ùå La transcripci√≥n est√° muy corta para generar un acta decente");
            return false;
        }

        console.log(`üìù Procesando: ${path.basename(archivoDeTranscripcion)}`);
        console.log(`üìè Tama√±o de la transcripci√≥n: ${textoTranscrito.length} caracteres`);

        // Creo mi generador de actas
        const miGenerador = new GeneradorDeActasSENA();
        
        // Inicializo la conexi√≥n con Gemini
        await miGenerador.init();

        // Extraigo informaci√≥n b√°sica del nombre del archivo
        const nombreBase = path.basename(archivoDeTranscripcion, path.extname(archivoDeTranscripcion));
        const informacionCompleta = {
            nombreDelProyecto: nombreBase.replace('_transcripcion', ''),
            fechaDeHoy: new Date().toLocaleDateString('es-CO'),
            ...informacionExtra
        };

        // Detecto informaci√≥n autom√°ticamente de la transcripci√≥n
        const programaDetectado = textoTranscrito.match(/programa\s+([^.]+)/i);
        const fichaDetectada = textoTranscrito.match(/ficha\s*:?\s*(\d+)/i);
        const aprendizDetectado = textoTranscrito.match(/aprendiz\s+([A-Z\s]+)/i);

        if (programaDetectado) informacionCompleta.programaAcademico = programaDetectado[1].trim();
        if (fichaDetectada) informacionCompleta.numeroFicha = fichaDetectada[1];
        if (aprendizDetectado) informacionCompleta.nombreAprendiz = aprendizDetectado[1].trim();

        // Genero varias versiones del acta
        const versionesGeneradas = await miGenerador.generarVariasVersionesDelActa(
            textoTranscrito, 
            informacionCompleta, 
            2  // Genero 2 versiones para comparar
        );

        if (versionesGeneradas.length > 0) {
            // Analizo cu√°l versi√≥n qued√≥ mejor
            const mejorVersion = miGenerador.analizarCalidadDeLasVersiones(versionesGeneradas);
            
            // Creo la versi√≥n final
            const archivoFinal = await miGenerador.crearVersionFinalDelActa(mejorVersion, informacionCompleta);
            
            console.log(`\nüéâ ¬°COMPLET√â MI PROCESO DE GENERACI√ìN DE ACTAS!`);
            console.log(`üìÑ Acta final: ${archivoFinal}`);
            console.log(`üìÅ Versiones generadas: ${versionesGeneradas.length}`);
            console.log("¬°Estoy muy orgulloso de este resultado!");
            
            return {
                archivoFinal: archivoFinal,
                versiones: versionesGeneradas,
                mejorVersion: mejorVersion
            };
        } else {
            console.error("‚ùå No logr√© generar ninguna versi√≥n del acta");
            return false;
        }

    } catch (error) {
        console.error("‚ùå Tuve un error en mi procesamiento:", error.message);
        return false;
    }
}

// Funci√≥n para buscar transcripciones autom√°ticamente en mi directorio
async function buscarYProcesarTodasLasTranscripciones() {
    console.log("üîó Buscando transcripciones que pueda procesar...");
    
    // Busco archivos de transcripci√≥n en mi directorio
    const archivosDeTranscripcion = fs.readdirSync('.')
        .filter(archivo => archivo.includes('_transcripcion.txt'))
        .sort();

    if (archivosDeTranscripcion.length === 0) {
        console.log("‚ÑπÔ∏è  No encontr√© transcripciones. Primero necesito ejecutar el transcriptor.");
        return;
    }

    console.log(`üìã Encontr√© ${archivosDeTranscripcion.length} transcripciones:`);
    archivosDeTranscripcion.forEach((archivo, i) => {
        console.log(`   ${i + 1}. ${archivo}`);
    });

    // Proceso cada transcripci√≥n
    for (const archivo of archivosDeTranscripcion) {
        console.log(`\n${'='.repeat(60)}`);
        console.log(`üéØ PROCESANDO: ${archivo}`);
        console.log(`${'='.repeat(60)}`);
        
        const resultado = await procesarTranscripcionParaGenerarActa(archivo);
        
        if (resultado) {
            console.log(`‚úÖ ${archivo} ‚Üí ${path.basename(resultado.archivoFinal)}`);
        } else {
            console.log(`‚ùå Tuve problemas procesando ${archivo}`);
        }
        
        // Pauso entre archivos para no saturar la API
        await new Promise(resolve => setTimeout(resolve, 3000));
    }
}

// Exporto mis funciones para que otros archivos las puedan usar
module.exports = {
    GeneradorActas: GeneradorDeActasSENA,  // Mantengo el nombre original para compatibilidad
    procesarTranscripcionConGemini: procesarTranscripcionParaGenerarActa,  // Alias para compatibilidad
    integrarConTranscriptor: buscarYProcesarTodasLasTranscripciones
};

// Esta parte se ejecuta cuando llamo al archivo directamente
if (require.main === module) {
    console.log("üéì GENERADOR DE ACTAS - PROYECTO DE PR√ÅCTICAS SENA");
    console.log("Desarrollado por un estudiante en formaci√≥n");
    console.log("¬°Espero que funcione bien!");
    console.log("=" .repeat(60));
    
    // Verifico los argumentos que me pasaron
    if (process.argv.length > 2) {
        // Modo espec√≠fico: procesar un archivo espec√≠fico
        const archivoEspecifico = process.argv[2];
        const extraArg = process.argv.find(a => a.startsWith('--articulos='));
        const articulos = extraArg ? extraArg.replace('--articulos=', '').split(',').map(a => a.trim()) : [];
        console.log(`üìÅ Voy a procesar espec√≠ficamente: ${archivoEspecifico}`);
        procesarTranscripcionParaGenerarActa(archivoEspecifico, { articulosReglamento: articulos });
    } else {
        // Modo autom√°tico: procesar todas las transcripciones que encuentre
        console.log("üîÑ Modo autom√°tico: voy a procesar todas las transcripciones");
        buscarYProcesarTodasLasTranscripciones();
    }
}